/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PatchRequest from '../model/PatchRequest';
import Scope from '../model/Scope';

/**
* OAuthScopes service.
* @module api/OAuthScopesApi
* @version 1.0.0
*/
export default class OAuthScopesApi {

    /**
    * Constructs a new OAuthScopesApi. 
    * @alias module:api/OAuthScopesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteOauthScopesByInum operation.
     * @callback module:api/OAuthScopesApi~deleteOauthScopesByInumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Scope.
     * Delete Scope.
     * @param {String} inum 
     * @param {module:api/OAuthScopesApi~deleteOauthScopesByInumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOauthScopesByInum(inum, callback) {
      let postBody = null;
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling deleteOauthScopesByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/scopes/{inum}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOauthScopes operation.
     * @callback module:api/OAuthScopesApi~getOauthScopesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Scope>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of Scopes.
     * Gets list of Scopes. Optionally type to filter the scope, max-size of the result and pattern can be provided.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Scope type.
     * @param {Number} opts.limit Search size - max size of the results to return. (default to 50)
     * @param {String} opts.pattern Search pattern.
     * @param {module:api/OAuthScopesApi~getOauthScopesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Scope>}
     */
    getOauthScopes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'limit': opts['limit'],
        'pattern': opts['pattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Scope];
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOauthScopesByInum operation.
     * @callback module:api/OAuthScopesApi~getOauthScopesByInumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Scope by Inum
     * Get Scope by Inum
     * @param {String} inum 
     * @param {module:api/OAuthScopesApi~getOauthScopesByInumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scope}
     */
    getOauthScopesByInum(inum, callback) {
      let postBody = null;
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling getOauthScopesByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Scope;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/scopes/{inum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOauthScopesById operation.
     * @callback module:api/OAuthScopesApi~patchOauthScopesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update modified attributes of existing Scope by Inum.
     * Update modified attributes of existing Scope by Inum.
     * @param {String} inum 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchRequest>} opts.patchRequest 
     * @param {module:api/OAuthScopesApi~patchOauthScopesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scope}
     */
    patchOauthScopesById(inum, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchRequest'];
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling patchOauthScopesById");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json-patch+json'];
      let accepts = ['application/json'];
      let returnType = Scope;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/scopes/{inum}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOauthScopes operation.
     * @callback module:api/OAuthScopesApi~postOauthScopesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Scope.
     * Create Scope.
     * @param {Object} opts Optional parameters
     * @param {module:model/Scope} opts.scope 
     * @param {module:api/OAuthScopesApi~postOauthScopesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scope}
     */
    postOauthScopes(opts, callback) {
      opts = opts || {};
      let postBody = opts['scope'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Scope;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/scopes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOauthScopes operation.
     * @callback module:api/OAuthScopesApi~putOauthScopesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates existing Scope.
     * Updates existing Scope.
     * @param {Object} opts Optional parameters
     * @param {module:model/Scope} opts.scope 
     * @param {module:api/OAuthScopesApi~putOauthScopesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scope}
     */
    putOauthScopes(opts, callback) {
      opts = opts || {};
      let postBody = opts['scope'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Scope;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/scopes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
