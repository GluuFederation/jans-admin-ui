/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScriptError from './ScriptError';
import SimpleCustomProperty from './SimpleCustomProperty';
import SimpleExtendedCustomProperty from './SimpleExtendedCustomProperty';

/**
 * The CustomScript model module.
 * @module model/CustomScript
 * @version 1.0.0
 */
class CustomScript {
    /**
     * Constructs a new <code>CustomScript</code>.
     * Script
     * @alias module:model/CustomScript
     * @param name {String} Custom script name. Should contain only letters, digits and underscores.
     * @param script {String} Actual script.
     * @param scriptType {module:model/CustomScript.ScriptTypeEnum} Type of script.
     * @param programmingLanguage {module:model/CustomScript.ProgrammingLanguageEnum} Programming language of the custom script.
     * @param moduleProperties {Array.<module:model/SimpleCustomProperty>} Module-level properties applicable to the script.
     * @param level {Number} Script level.
     */
    constructor(name, script, scriptType, programmingLanguage, moduleProperties, level) { 
        
        CustomScript.initialize(this, name, script, scriptType, programmingLanguage, moduleProperties, level);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, script, scriptType, programmingLanguage, moduleProperties, level) { 
        obj['name'] = name;
        obj['script'] = script;
        obj['scriptType'] = scriptType;
        obj['programmingLanguage'] = programmingLanguage;
        obj['moduleProperties'] = moduleProperties;
        obj['level'] = level;
    }

    /**
     * Constructs a <code>CustomScript</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomScript} obj Optional instance to populate.
     * @return {module:model/CustomScript} The populated <code>CustomScript</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomScript();

            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('inum')) {
                obj['inum'] = ApiClient.convertToType(data['inum'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('scriptType')) {
                obj['scriptType'] = ApiClient.convertToType(data['scriptType'], 'String');
            }
            if (data.hasOwnProperty('programmingLanguage')) {
                obj['programmingLanguage'] = ApiClient.convertToType(data['programmingLanguage'], 'String');
            }
            if (data.hasOwnProperty('moduleProperties')) {
                obj['moduleProperties'] = ApiClient.convertToType(data['moduleProperties'], [SimpleCustomProperty]);
            }
            if (data.hasOwnProperty('configurationProperties')) {
                obj['configurationProperties'] = ApiClient.convertToType(data['configurationProperties'], [SimpleExtendedCustomProperty]);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('scriptError')) {
                obj['scriptError'] = ScriptError.constructFromObject(data['scriptError']);
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Boolean');
            }
            if (data.hasOwnProperty('internal')) {
                obj['internal'] = ApiClient.convertToType(data['internal'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} dn
 */
CustomScript.prototype['dn'] = undefined;

/**
 * XRI i-number. Identifier to uniquely identify the script.
 * @member {String} inum
 */
CustomScript.prototype['inum'] = undefined;

/**
 * Custom script name. Should contain only letters, digits and underscores.
 * @member {String} name
 */
CustomScript.prototype['name'] = undefined;

/**
 * List of possible aliases for the custom script.
 * @member {Array.<String>} aliases
 */
CustomScript.prototype['aliases'] = undefined;

/**
 * Details describing the script.
 * @member {String} description
 */
CustomScript.prototype['description'] = undefined;

/**
 * Actual script.
 * @member {String} script
 */
CustomScript.prototype['script'] = undefined;

/**
 * Type of script.
 * @member {module:model/CustomScript.ScriptTypeEnum} scriptType
 */
CustomScript.prototype['scriptType'] = undefined;

/**
 * Programming language of the custom script.
 * @member {module:model/CustomScript.ProgrammingLanguageEnum} programmingLanguage
 */
CustomScript.prototype['programmingLanguage'] = undefined;

/**
 * Module-level properties applicable to the script.
 * @member {Array.<module:model/SimpleCustomProperty>} moduleProperties
 */
CustomScript.prototype['moduleProperties'] = undefined;

/**
 * Configuration properties applicable to the script.
 * @member {Array.<module:model/SimpleExtendedCustomProperty>} configurationProperties
 */
CustomScript.prototype['configurationProperties'] = undefined;

/**
 * Script level.
 * @member {Number} level
 */
CustomScript.prototype['level'] = undefined;

/**
 * Update revision number of the script.
 * @member {Number} revision
 * @default 0
 */
CustomScript.prototype['revision'] = 0;

/**
 * boolean value indicating if script enabled.
 * @member {Boolean} enabled
 * @default false
 */
CustomScript.prototype['enabled'] = false;

/**
 * @member {module:model/ScriptError} scriptError
 */
CustomScript.prototype['scriptError'] = undefined;

/**
 * boolean value indicating if the script is modified.
 * @member {Boolean} modified
 * @default false
 */
CustomScript.prototype['modified'] = false;

/**
 * boolean value indicating if the script is internal.
 * @member {Boolean} internal
 * @default false
 */
CustomScript.prototype['internal'] = false;





/**
 * Allowed values for the <code>scriptType</code> property.
 * @enum {String}
 * @readonly
 */
CustomScript['ScriptTypeEnum'] = {

    /**
     * value: "PERSON_AUTHENTICATION"
     * @const
     */
    "PERSON_AUTHENTICATION": "PERSON_AUTHENTICATION",

    /**
     * value: "INTROSPECTION"
     * @const
     */
    "INTROSPECTION": "INTROSPECTION",

    /**
     * value: "RESOURCE_OWNER_PASSWORD_CREDENTIALS"
     * @const
     */
    "RESOURCE_OWNER_PASSWORD_CREDENTIALS": "RESOURCE_OWNER_PASSWORD_CREDENTIALS",

    /**
     * value: "APPLICATION_SESSION"
     * @const
     */
    "APPLICATION_SESSION": "APPLICATION_SESSION",

    /**
     * value: "CACHE_REFRESH"
     * @const
     */
    "CACHE_REFRESH": "CACHE_REFRESH",

    /**
     * value: "UPDATE_USER"
     * @const
     */
    "UPDATE_USER": "UPDATE_USER",

    /**
     * value: "USER_REGISTRATION"
     * @const
     */
    "USER_REGISTRATION": "USER_REGISTRATION",

    /**
     * value: "CLIENT_REGISTRATION"
     * @const
     */
    "CLIENT_REGISTRATION": "CLIENT_REGISTRATION",

    /**
     * value: "ID_GENERATOR"
     * @const
     */
    "ID_GENERATOR": "ID_GENERATOR",

    /**
     * value: "UMA_RPT_POLICY"
     * @const
     */
    "UMA_RPT_POLICY": "UMA_RPT_POLICY",

    /**
     * value: "UMA_RPT_CLAIMS"
     * @const
     */
    "UMA_RPT_CLAIMS": "UMA_RPT_CLAIMS",

    /**
     * value: "UMA_CLAIMS_GATHERING"
     * @const
     */
    "UMA_CLAIMS_GATHERING": "UMA_CLAIMS_GATHERING",

    /**
     * value: "CONSENT_GATHERING"
     * @const
     */
    "CONSENT_GATHERING": "CONSENT_GATHERING",

    /**
     * value: "DYNAMIC_SCOPE"
     * @const
     */
    "DYNAMIC_SCOPE": "DYNAMIC_SCOPE",

    /**
     * value: "SPONTANEOUS_SCOPE"
     * @const
     */
    "SPONTANEOUS_SCOPE": "SPONTANEOUS_SCOPE",

    /**
     * value: "END_SESSION"
     * @const
     */
    "END_SESSION": "END_SESSION",

    /**
     * value: "POST_AUTHN"
     * @const
     */
    "POST_AUTHN": "POST_AUTHN",

    /**
     * value: "SCIM"
     * @const
     */
    "SCIM": "SCIM",

    /**
     * value: "CIBA_END_USER_NOTIFICATION"
     * @const
     */
    "CIBA_END_USER_NOTIFICATION": "CIBA_END_USER_NOTIFICATION",

    /**
     * value: "PERSISTENCE_EXTENSION"
     * @const
     */
    "PERSISTENCE_EXTENSION": "PERSISTENCE_EXTENSION",

    /**
     * value: "IDP"
     * @const
     */
    "IDP": "IDP",

    /**
     * value: "UPDATE_TOKEN"
     * @const
     */
    "UPDATE_TOKEN": "UPDATE_TOKEN"
};


/**
 * Allowed values for the <code>programmingLanguage</code> property.
 * @enum {String}
 * @readonly
 */
CustomScript['ProgrammingLanguageEnum'] = {

    /**
     * value: "PYTHON"
     * @const
     */
    "PYTHON": "PYTHON",

    /**
     * value: "JAVASCRIPT"
     * @const
     */
    "JAVASCRIPT": "JAVASCRIPT"
};



export default CustomScript;

