/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CouchbaseConfiguration model module.
 * @module model/CouchbaseConfiguration
 * @version 1.0.0
 */
class CouchbaseConfiguration {
    /**
     * Constructs a new <code>CouchbaseConfiguration</code>.
     * @alias module:model/CouchbaseConfiguration
     */
    constructor() { 
        
        CouchbaseConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CouchbaseConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CouchbaseConfiguration} obj Optional instance to populate.
     * @return {module:model/CouchbaseConfiguration} The populated <code>CouchbaseConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CouchbaseConfiguration();

            if (data.hasOwnProperty('configId')) {
                obj['configId'] = ApiClient.convertToType(data['configId'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('userPassword')) {
                obj['userPassword'] = ApiClient.convertToType(data['userPassword'], 'String');
            }
            if (data.hasOwnProperty('servers')) {
                obj['servers'] = ApiClient.convertToType(data['servers'], ['String']);
            }
            if (data.hasOwnProperty('defaultBucket')) {
                obj['defaultBucket'] = ApiClient.convertToType(data['defaultBucket'], 'String');
            }
            if (data.hasOwnProperty('buckets')) {
                obj['buckets'] = ApiClient.convertToType(data['buckets'], ['String']);
            }
            if (data.hasOwnProperty('passwordEncryptionMethod')) {
                obj['passwordEncryptionMethod'] = ApiClient.convertToType(data['passwordEncryptionMethod'], 'String');
            }
            if (data.hasOwnProperty('operationTracingEnabled')) {
                obj['operationTracingEnabled'] = ApiClient.convertToType(data['operationTracingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('mutationTokensEnabled')) {
                obj['mutationTokensEnabled'] = ApiClient.convertToType(data['mutationTokensEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('connectTimeout')) {
                obj['connectTimeout'] = ApiClient.convertToType(data['connectTimeout'], 'Number');
            }
            if (data.hasOwnProperty('computationPoolSize')) {
                obj['computationPoolSize'] = ApiClient.convertToType(data['computationPoolSize'], 'Number');
            }
            if (data.hasOwnProperty('useSSL')) {
                obj['useSSL'] = ApiClient.convertToType(data['useSSL'], 'Boolean');
            }
            if (data.hasOwnProperty('sslTrustStoreFile')) {
                obj['sslTrustStoreFile'] = ApiClient.convertToType(data['sslTrustStoreFile'], 'String');
            }
            if (data.hasOwnProperty('sslTrustStorePin')) {
                obj['sslTrustStorePin'] = ApiClient.convertToType(data['sslTrustStorePin'], 'String');
            }
            if (data.hasOwnProperty('sslTrustStoreFormat')) {
                obj['sslTrustStoreFormat'] = ApiClient.convertToType(data['sslTrustStoreFormat'], 'String');
            }
            if (data.hasOwnProperty('binaryAttributes')) {
                obj['binaryAttributes'] = ApiClient.convertToType(data['binaryAttributes'], ['String']);
            }
            if (data.hasOwnProperty('certificateAttributes')) {
                obj['certificateAttributes'] = ApiClient.convertToType(data['certificateAttributes'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Unique identifier
 * @member {String} configId
 */
CouchbaseConfiguration.prototype['configId'] = undefined;

/**
 * Couchbase server user.
 * @member {String} userName
 */
CouchbaseConfiguration.prototype['userName'] = undefined;

/**
 * Encoded Couchbase server user password.
 * @member {String} userPassword
 */
CouchbaseConfiguration.prototype['userPassword'] = undefined;

/**
 * Couchbase server host and port.
 * @member {Array.<String>} servers
 */
CouchbaseConfiguration.prototype['servers'] = undefined;

/**
 * Main bucket that application should use if other mapping rules were not applied.
 * @member {String} defaultBucket
 */
CouchbaseConfiguration.prototype['defaultBucket'] = undefined;

/**
 * List of buckets defining mapping rules.
 * @member {Array.<String>} buckets
 */
CouchbaseConfiguration.prototype['buckets'] = undefined;

/**
 * A list of the password encryption algorithms.
 * @member {module:model/CouchbaseConfiguration.PasswordEncryptionMethodEnum} passwordEncryptionMethod
 */
CouchbaseConfiguration.prototype['passwordEncryptionMethod'] = undefined;

/**
 * Boolean value True if tracing is enabled on the environment.
 * @member {Boolean} operationTracingEnabled
 */
CouchbaseConfiguration.prototype['operationTracingEnabled'] = undefined;

/**
 * If mutation tokens are enabled, they can be used for advanced durability requirements, as well as optimized RYOW consistency.
 * @member {Boolean} mutationTokensEnabled
 */
CouchbaseConfiguration.prototype['mutationTokensEnabled'] = undefined;

/**
 * The default timeout for connection timeout.
 * @member {Number} connectTimeout
 */
CouchbaseConfiguration.prototype['connectTimeout'] = undefined;

/**
 * Sets the pool size (number of threads to use) for all non-blocking operations, default value is the number of CPUs.
 * @member {Number} computationPoolSize
 */
CouchbaseConfiguration.prototype['computationPoolSize'] = undefined;

/**
 * Identifies if SSL should be enabled.
 * @member {Boolean} useSSL
 */
CouchbaseConfiguration.prototype['useSSL'] = undefined;

/**
 * The path to the trust store file to use. It contains the trusted certificates.
 * @member {String} sslTrustStoreFile
 */
CouchbaseConfiguration.prototype['sslTrustStoreFile'] = undefined;

/**
 * The PIN to use to access the contents of the trust store.
 * @member {String} sslTrustStorePin
 */
CouchbaseConfiguration.prototype['sslTrustStorePin'] = undefined;

/**
 * The format to use for the trust store.
 * @member {String} sslTrustStoreFormat
 */
CouchbaseConfiguration.prototype['sslTrustStoreFormat'] = undefined;

/**
 * List of binary attributes.
 * @member {Array.<String>} binaryAttributes
 */
CouchbaseConfiguration.prototype['binaryAttributes'] = undefined;

/**
 * List of certificate attributes.
 * @member {Array.<String>} certificateAttributes
 */
CouchbaseConfiguration.prototype['certificateAttributes'] = undefined;





/**
 * Allowed values for the <code>passwordEncryptionMethod</code> property.
 * @enum {String}
 * @readonly
 */
CouchbaseConfiguration['PasswordEncryptionMethodEnum'] = {

    /**
     * value: "SHA"
     * @const
     */
    "SHA": "SHA",

    /**
     * value: "SSHA"
     * @const
     */
    "SSHA": "SSHA",

    /**
     * value: "SHA-256"
     * @const
     */
    "SHA-256": "SHA-256",

    /**
     * value: "SSHA-256"
     * @const
     */
    "SSHA-256": "SSHA-256",

    /**
     * value: "SHA-384"
     * @const
     */
    "SHA-384": "SHA-384",

    /**
     * value: "SSHA-384"
     * @const
     */
    "SSHA-384": "SSHA-384",

    /**
     * value: "SHA-512"
     * @const
     */
    "SHA-512": "SHA-512",

    /**
     * value: "SSHA-512"
     * @const
     */
    "SSHA-512": "SSHA-512",

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5",

    /**
     * value: "SMD5"
     * @const
     */
    "SMD5": "SMD5",

    /**
     * value: "CRYPT"
     * @const
     */
    "CRYPT": "CRYPT",

    /**
     * value: "CRYPT-MD5"
     * @const
     */
    "CRYPT-MD5": "CRYPT-MD5",

    /**
     * value: "CRYPT-SHA-256"
     * @const
     */
    "CRYPT-SHA-256": "CRYPT-SHA-256",

    /**
     * value: "CRYPT-SHA-512"
     * @const
     */
    "CRYPT-SHA-512": "CRYPT-SHA-512",

    /**
     * value: "CRYPT-BCRYPT"
     * @const
     */
    "CRYPT-BCRYPT": "CRYPT-BCRYPT",

    /**
     * value: "CRYPT-BCRYPT"
     * @const
     */
    "CRYPT-BCRYPT": "CRYPT-BCRYPT",

    /**
     * value: "PKCS5S2"
     * @const
     */
    "PKCS5S2": "PKCS5S2"
};



export default CouchbaseConfiguration;

